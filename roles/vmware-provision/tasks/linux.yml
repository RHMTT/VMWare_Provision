---
- name: Clone the template
  vmware_guest:
    hostname: "{{ vc_hostname | default(omit) }}"
    username: "{{ vc_username | default(omit) }}"
    password: "{{ vc_password | default(omit) }}"
    validate_certs: "{{ vc_validate_certs | default(False) }}"
    name: "{{ new_vm_name }}"
    template: "{{ vm_template }}"
    datacenter: "{{ vc_datacenter }}"
    folder: "/{{ vc_datacenter }}/vm/{{ vm_folder }}"
    state: poweredon
    wait_for_ip_address: yes
    disk:
    - size_gb: "{{ vm_disk_size | default(omit) }}"
      type: thin
      datastore: "{{ vc_datastore }}"
    hardware:
      memory_mb: "{{ vm_ram_mb | default(omit) }}"
      num_cpus: "{{ vm_cpu_count | default(omit) }}"
      num_cpu_cores_per_socket: "{{ vm_core_count | default(omit) }}"
      hotadd_cpu: "{{ hotadd_cpu | default(True) }}"
      hotremove_cpu: "{{ hotremove_cpu| default(True) }}"
      hotadd_memory: "{{ hotadd_memory | default(True) }}"
    networks: 
    - name: "{{ vm_network | default('VM Network') }}"
      start_connected: true
    customization:
      domain: "{{ vm_domain }}"
      hostname: "{{ new_vm_name }}"
  register: newvminfo
  delegate_to: localhost
  tags: clone

- name: Add virtual machine custom attributes
  vmware_guest_custom_attributes:
    hostname: "{{ vc_hostname | default(omit) }}"
    username: "{{ vc_username | default(omit) }}"
    password: "{{ vc_password | default(omit) }}"
    validate_certs: "{{ vc_validate_certs | default(False) }}"
    name: "{{ new_vm_name }}"
    folder: "/{{ vc_datacenter }}/vm/{{ vm_folder }}"
    state: present
    attributes:
      - name: "{{ attribute_item.name }}"
        value: "{{ attribute_item.value }}"
  with_items:
    - "{{ vm_attributes }}"
  loop_control:
    loop_var: attribute_item
  when: vm_attributes is defined
  delegate_to: localhost
  register: attributes
  tags: attributes

- name: Ensure the ssh directory exists
  vmware_vm_shell:
    hostname: "{{ vc_hostname | default(omit) }}"
    username: "{{ vc_username | default(omit) }}"
    password: "{{ vc_password | default(omit) }}"
    validate_certs: "{{ vc_validate_certs | default(False) }}"
    datacenter: "{{ vc_datacenter }}"
    folder: "/{{ vc_datacenter }}/vm/{{ vm_folder }}"
    vm_id: "{{ new_vm_name }}"
    vm_username: "{{ vm_username }}"
    vm_password: "{{ vm_password }}"
    vm_shell: "{{ shell_item.shell }}"
    vm_shell_args: "{{ shell_item.shell_args }}"
  delegate_to: localhost
  with_items:
    - "{{ shell_commands }}"
  loop_control:
    loop_var: shell_item
  when: shell_commands is defined
  tags: shell

- name: Add the Ansible ssh keys
  vmware_vm_shell:
    hostname: "{{ vc_hostname | default(omit) }}"
    username: "{{ vc_username | default(omit) }}"
    password: "{{ vc_password | default(omit) }}"
    validate_certs: "{{ vc_validate_certs | default(False) }}"
    datacenter: "{{ vc_datacenter }}"
    folder: "/{{ vc_datacenter }}/vm/{{ vm_folder }}"
    vm_id: "{{ new_vm_name }}"
    vm_username: "{{ vm_username }}"
    vm_password: "{{ vm_password }}"
    vm_shell: "/bin/echo"
    vm_shell_args: "{{ ssh_item }} >> ~/.ssh/authorized_keys"
  delegate_to: localhost
  with_items:
    - "{{ ssh_keys }}"
  loop_control:
    loop_var: ssh_item
  when: ssh_keys is defined
  tags: shell

- name: New VM info
  debug:
    msg: "New VM {{ new_vm_name}} has IP address {{ newvminfo.instance.ipv4 }} and UUID {{ newvminfo.instance.hw_product_uuid }}"
  when: newvminfo.instance.ipv4 is defined
  ignore_errors: true

- name: "add {{ newvminfo.instance.ipv4 }} host to group newlinuxvm"
  add_host:
    name: "{{ new_vm_name}}"
    ansible_host: "{{ newvminfo.instance.ipv4 }}"
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
    name_hostonly: "{{ new_vm_name}}"
    name_fqdn: "{{ new_vm_name}}.{{ vm_domain }}"
    groups: newlinuxvm
  changed_when: False

